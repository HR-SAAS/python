# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import counter_pb2 as counter__pb2


class CounterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CountCompany = channel.unary_unary(
                '/Counter/CountCompany',
                request_serializer=counter__pb2.CountCompanyRequest.SerializeToString,
                response_deserializer=counter__pb2.CountResponse.FromString,
                )
        self.CountCompanyUser = channel.unary_unary(
                '/Counter/CountCompanyUser',
                request_serializer=counter__pb2.CountCompanyUserRequest.SerializeToString,
                response_deserializer=counter__pb2.CountResponse.FromString,
                )
        self.CountDepartment = channel.unary_unary(
                '/Counter/CountDepartment',
                request_serializer=counter__pb2.CountDepartmentRequest.SerializeToString,
                response_deserializer=counter__pb2.CountResponse.FromString,
                )
        self.CountDepartmentUser = channel.unary_unary(
                '/Counter/CountDepartmentUser',
                request_serializer=counter__pb2.CountDepartmentUserRequest.SerializeToString,
                response_deserializer=counter__pb2.CountResponse.FromString,
                )


class CounterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CountCompany(self, request, context):
        """-----------------------统计服务---
        统计一共多少个公司
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountCompanyUser(self, request, context):
        """统计某公司多少人
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountDepartment(self, request, context):
        """统计公司有多少个部门
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountDepartmentUser(self, request, context):
        """统计部门人数
        统计其他
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CounterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CountCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.CountCompany,
                    request_deserializer=counter__pb2.CountCompanyRequest.FromString,
                    response_serializer=counter__pb2.CountResponse.SerializeToString,
            ),
            'CountCompanyUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CountCompanyUser,
                    request_deserializer=counter__pb2.CountCompanyUserRequest.FromString,
                    response_serializer=counter__pb2.CountResponse.SerializeToString,
            ),
            'CountDepartment': grpc.unary_unary_rpc_method_handler(
                    servicer.CountDepartment,
                    request_deserializer=counter__pb2.CountDepartmentRequest.FromString,
                    response_serializer=counter__pb2.CountResponse.SerializeToString,
            ),
            'CountDepartmentUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CountDepartmentUser,
                    request_deserializer=counter__pb2.CountDepartmentUserRequest.FromString,
                    response_serializer=counter__pb2.CountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Counter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Counter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CountCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Counter/CountCompany',
            counter__pb2.CountCompanyRequest.SerializeToString,
            counter__pb2.CountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountCompanyUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Counter/CountCompanyUser',
            counter__pb2.CountCompanyUserRequest.SerializeToString,
            counter__pb2.CountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountDepartment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Counter/CountDepartment',
            counter__pb2.CountDepartmentRequest.SerializeToString,
            counter__pb2.CountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountDepartmentUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Counter/CountDepartmentUser',
            counter__pb2.CountDepartmentUserRequest.SerializeToString,
            counter__pb2.CountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
